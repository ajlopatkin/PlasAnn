name: PlasAnn Cross-Platform Tests

on:
  push:
    branches: [ main, master, v1.1.0 ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y ncbi-blast+ prodigal

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install blast prodigal infernal

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Debug imports
      run: |
        echo "=== Testing basic Python import ==="
        python -c "import sys; print('Python:', sys.version)"
        
        echo "=== Testing plasann import ==="
        python -c "
        try:
            import plasann
            print('‚úÖ plasann imported')
        except Exception as e:
            print('‚ùå plasann import failed:', e)
            import traceback
            traceback.print_exc()
        "
        
        echo "=== Testing individual modules ==="
        python -c "
        try:
            from plasann import essential_annotation
            print('‚úÖ essential_annotation imported')
        except Exception as e:
            print('‚ùå essential_annotation failed:', e)
        "
        
        python -c "
        try:
            from plasann import database_download  
            print('‚úÖ database_download imported')
        except Exception as e:
            print('‚ùå database_download failed:', e)
        "
        
        python -c "
        try:
            from plasann import draw_plasmid
            print('‚úÖ draw_plasmid imported')
        except Exception as e:
            print('‚ùå draw_plasmid failed:', e)
        "

    - name: Test PlasAnn after debugging
      run: |
        PlasAnn --version || echo "Version command failed"

    - name: Display system info
      run: |
        echo "üñ•Ô∏è System: ${{ matrix.os }}"
        echo "üêç Python: ${{ matrix.python-version }}"
        echo "üèõÔ∏è Architecture: $(uname -m)" || echo "Architecture: Windows"
        python --version
